#!/bin/bash

# Color constants
LIGHT_GRAY='\033[0;90m'
LIGHTBLUE='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
WHITE='\033[0;37m'
WHITE_BOLD='\033[1;37m'
GREEN_BOLD='\033[1;32m'
YELLOW_BOLD='\033[1;33m'
RED='\033[0;31m'
NC=${LIGHT_GRAY}  # No color = light grey

colorize_log() {
  while IFS= read -r line; do
    # Skip empty lines
    if [ -z "$line" ]; then 
      continue
    fi

    # Capture the relevant parts of the log line
    timestamp=$(echo "$line" | cut -f1)
    log_level=$(echo "$line" | cut -f3)
    log_message=$(echo "$line" | cut -f4-)

    # Set colors for different log levels and special lines
    case $log_level in
      INFO)
        level_color="${NC}"  # NC
        ;;
      ERROR)
        level_color="${RED}"  # Red
        ;;
      WARN)
        level_color="${YELLOW}"  # Yellow
        ;;
      *)
        level_color="${NC}"   # Default (no color)
        ;;
    esac

    # Check for start and end lines and apply bold formatting
    # Remove the continue if you like start and end statements
    if [[ $line == "START"* ]]; then
      continue
      log_message="${GREEN}$line${NC}"
      echo -e "${level_color}${log_message}${NC}"
    elif [[ $line == "END"* ]]; then
      continue
      log_message="${RED}$line${NC}"
      echo -e "${level_color}${log_message}${NC}"
    else

      if [[ $log_message =~ \(([^\)]+)\) ]]; then
        email_address=${BASH_REMATCH[1]}
        rest_of_line=${log_message//($email_address)/}
        rest_of_line=${rest_of_line#" "}
        rest_of_line=${rest_of_line%" "}
      else
        email_address=""
        rest_of_line="$log_message"
      fi

      if [[ $rest_of_line == "BEGIN"* ]]; then
        line_without_begin=${rest_of_line//BEGIN/}
        rest_of_line="${GREEN}BEGIN${NC} ${LIGHTBLUE}$line_without_begin${NC}"
      elif [[ $rest_of_line == "END"* ]]; then
        line_without_end=${rest_of_line//END/}
        rest_of_line="${RED}END${NC} $line_without_end"
      else
        # These are the key lines we want - custom logging output
        rest_of_line="${WHITE_BOLD}$rest_of_line${NC}"
      fi

      # Format the log line with colors
  
      if [ -z "$email_address" ]; then
        echo -e "${timestamp} ${level_color}${log_level}${NC} ${rest_of_line}${NC}"
      else
        echo -e "${timestamp} ${level_color}${log_level}${NC} (${LIGHTBLUE}${email_address}${NC}) ${rest_of_line}${NC}"
      fi
    fi

done
}

main() {

  echo "
   _____               _     _                       ____ _ _            _   
  |_   _|__ _ __   ___| |_  | |    ___   __ _ ___   / ___| (_) ___ _ __ | |_ 
    | |/ _ \ '_ \ / _ \ __| | |   / _ \ / _\` / __| | |   | | |/ _ \ '_ \| __|
    | |  __/ | | |  __/ |_  | |__| (_) | (_| \__ \ | |___| | |  __/ | | | |_ 
    |_|\___|_| |_|\___|\__| |_____\___/ \__, |___/  \____|_|_|\___|_| |_|\__|
                                        |___/                                      
                                                  V e l o c i t y,  b a b y !
  "

  if [[ $# -eq 0 ]]; then
    echo -e "${RED}Error: No command specified.${NC}"
    return 1
  fi

  command="$1"
  stack=$2
  service=$3
  shift 3

  # Validate input arguments
  if [[ -z $stack ]]; then
    echo -e "${RED}Error: Stack argument is required.${NC}"
    return 1
  fi

  if [[ -z $service ]]; then
    echo -e "${RED}Error: Service argument is required.${NC}"
    return 1
  fi

  prefix="/aws/lambda/${stack}-${service}"

  # Fetch list of log groups
  groups=$(saw groups --prefix "$prefix")

  # Check if no groups found
  if [[ -z $groups ]]; then
    echo -e "${RED}No log groups found for the given stack and service.${NC}"
    return 1
  fi

  latest_group=""
  latest_stream=""
  latest_timestamp=""
  stream_found=false

  # Iterate over each group
  while IFS= read -r group; do
    # Log message - Processing group
    formatted_group="${NC}${group//$stack/${GREEN_BOLD}$stack${NC}}"
    formatted_group="${NC}${formatted_group//$service/${YELLOW_BOLD}$service${NC}}"
    echo -e "${NC}Processing group: $formatted_group${NC}"

    # Get the list of streams for the current group, ordered by LastEventTime in descending order
    stream_timestamps=$(aws logs describe-log-streams --log-group-name "$group" --order-by LastEventTime --descending --max-items 1 | jq -r '.logStreams[].lastEventTimestamp')

    # Check if streams exist for the current group
    if [[ -n $stream_timestamps ]]; then
      # Extract the first stream from the list (the most recent stream)
      timestamp=$(echo "$stream_timestamps" | head -n 1)

      # Compare the current stream's timestamp with the latest timestamp
      if [[ -z $latest_timestamp ]] || [[ $timestamp > $latest_timestamp ]]; then
        latest_timestamp=$timestamp
        latest_group=$group
      fi

      stream_found=true
    fi
  done <<< "$groups"

  # Check if no streams found
  if [[ $stream_found = false ]]; then
    echo -e "${RED}No streams found in any of the log groups.${NC}"
    return 1
  fi

  # Log message - Latest group and stream
  echo -e "${WHITE_BOLD}The group with the most recent stream is:${NC} $latest_group"
  echo "Fetching logs..."

  log_group=$latest_group

  # Add some useful filtering to the logs in addition to filter provided.
  # To make this work, we have to grab the filter argument and modify it, while leaving
  # the rest of the parameters untouched - so shifting won't work.
  base_filter='-embedded -"Initializing logger" -"Error writing metrics" -"REPORT RequestId"'
  local filter_arg
  filter_arg=$base_filter
  local remaining_args=("$@")  # Store the arguments in a separate array
  for ((i = 0; i < $#; i++)); do
    case "${remaining_args[i]}" in
      --filter)
        if [[ -n "${remaining_args[i + 1]}" ]]; then
          filter_arg="${remaining_args[i + 1]} ${base_filter}"
          ((i++))  # Skip the next argument
        else
          echo "Error: Missing argument for --filter"
          return 1
        fi
        ;;
    esac
  done

  case $command in
    groups)
      saw groups "$@"
      ;;
    streams)
      saw streams "$log_group" "$@"
      ;;
    watch)
      saw watch "$log_group" "$@" | colorize_log
      ;;
    get)
      saw get $log_group "$@" --filter "$filter_arg" | colorize_log
      ;;
    *)
      echo -e "${RED}Error: Invalid command: $command${NC}"
      return 1
      ;;
  esac
}

# Invoke the main function
main "$@"

